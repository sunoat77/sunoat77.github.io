<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>程序猫</title>
  
  <subtitle>欢迎来到程序猫的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sunoat77.github.io/"/>
  <updated>2019-05-07T09:19:31.082Z</updated>
  <id>http://sunoat77.github.io/</id>
  
  <author>
    <name>codeCat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java面试题</title>
    <link href="http://sunoat77.github.io/2019/05/07/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://sunoat77.github.io/2019/05/07/java面试题/</id>
    <published>2019-05-07T06:30:57.000Z</published>
    <updated>2019-05-07T09:19:31.082Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java面试中，频率最多的问题</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="如果面试官问：如果我们说你不适合来到我们公司工作，你会介意么？"><a href="#如果面试官问：如果我们说你不适合来到我们公司工作，你会介意么？" class="headerlink" title="如果面试官问：如果我们说你不适合来到我们公司工作，你会介意么？"></a>如果面试官问：如果我们说你不适合来到我们公司工作，你会介意么？</h2><p><em>回答样本一</em>：如果说介意，那显得你小气，如果说不介意，显得你对这份工作不够渴望。如果说自己一定能上，又显得太自负。是我的话，我可能会说：我一直以来都非常欣赏贵公司的…，也一直希望自己能有这个机会加入到当中来，为公司的发展尽一份力。如果贵公司因为某些考虑最终没有选择我，也丝毫不会影响我对贵公司的好感和热爱的。当然我会觉得有些遗憾，但我一样会心怀感激，同时我也希望贵公司能重新考虑游戏啊。</p><h2 id="谈谈你自己的优点和缺点"><a href="#谈谈你自己的优点和缺点" class="headerlink" title="谈谈你自己的优点和缺点"></a>谈谈你自己的优点和缺点</h2><p><em>回答样本一</em>：优点：做事有规划，认真负责（可以举个例子）如：在学习中，老师布置的作业都会提前完成，不会拖到最后一天，每一个任务都认真的完成<br>             缺点：朋友之间说话比较直，对于别人做的的过分或者错误的事情，我会直接的指出来，不顾虑别人的感受，我也在克服自己的缺点，锻炼自己的说话技巧，把话说的圆润一点，达到同样的效果。</p><h2 id="谈谈你的座右铭："><a href="#谈谈你的座右铭：" class="headerlink" title="谈谈你的座右铭："></a>谈谈你的座右铭：</h2><p><em>回答样本一</em>：事不拖，话不多，人不作。</p><h2 id="你朋友对你的评价："><a href="#你朋友对你的评价：" class="headerlink" title="你朋友对你的评价："></a>你朋友对你的评价：</h2><p><em>回答样本一</em>：我的朋友认为我是一个可以信赖的人，因为我一旦答应别人的事情，就一定会做到，我也总是能站到别人的角度考虑问题。我很注重别人微表情的变化，以此来判断别人内心的变化。</p><h2 id="谈谈你对996的看法"><a href="#谈谈你对996的看法" class="headerlink" title="谈谈你对996的看法"></a>谈谈你对996的看法</h2><p><em>回答样本一</em>：第一、如果工作需要，我会加班，但同时，我也会提高工作效率，减少不必要的加班。第二、如果自己找到了自己喜欢的工作，就不存在996的问题，因为你是快乐的，如果不热爱这个工作，分分钟都是煎熬。第三、作为正规公司，对于员工的付出，应该做出合理的补偿，这也是对员工付出的一种认可</p><h2 id="谈谈你对跳槽的看法"><a href="#谈谈你对跳槽的看法" class="headerlink" title="谈谈你对跳槽的看法"></a>谈谈你对跳槽的看法</h2><p><em>回答样本一</em>：正常的跳槽能促进人才合理流动，应该支持。频繁的跳槽对单位和个人双方都不利，应该反对。</p><h2 id="你的业余爱好是什么："><a href="#你的业余爱好是什么：" class="headerlink" title="你的业余爱好是什么："></a>你的业余爱好是什么：</h2><p><em>回答样本一</em>：找一些富于团队合作精神的，如：我的业余爱好是游泳，因为游泳能让人全身得到放松。夜跑：夜里比较安静，跑步能发泄自己，一身的汗水让自己更轻松</p><h2 id="如果我们录用你，你将怎样开展工作"><a href="#如果我们录用你，你将怎样开展工作" class="headerlink" title="如果我们录用你，你将怎样开展工作"></a>如果我们录用你，你将怎样开展工作</h2><p><em>回答样本一</em>： 首先听取领导的指示和要求，然后就有关情况进行了解和熟悉，接下来制定一份近期的工作计划并报领导批准，最后根据计划开展工作</p><h2 id="你希望和什么样的上级公事："><a href="#你希望和什么样的上级公事：" class="headerlink" title="你希望和什么样的上级公事："></a>你希望和什么样的上级公事：</h2><p><em>回答样本一</em>：作为刚步入社会的新人，我应该多要求自己尽快熟悉环境，适应环境，而不是对环境提出什么要求，只要能发挥我的专长就可以了。</p><h2 id="与上级意见不一致，你将怎么办："><a href="#与上级意见不一致，你将怎么办：" class="headerlink" title="与上级意见不一致，你将怎么办："></a>与上级意见不一致，你将怎么办：</h2><p><em>回答样本一</em>：我会给上级以必要的提醒和解释，在这种情况下，我会服从上级的意见。</p><h2 id="如果你在这次面试中没有被录用，你怎么打算？"><a href="#如果你在这次面试中没有被录用，你怎么打算？" class="headerlink" title="如果你在这次面试中没有被录用，你怎么打算？"></a>如果你在这次面试中没有被录用，你怎么打算？</h2><p><em>回答样本一</em>： 现在的社会是个竞争的社会，从这次面试中也可以看出这一点，有竞争必然有优劣，有成功必定有失败。如果这次失败了，也仅仅一次失败而已，只有经过经验经历的积累才能塑造出一个完美的成功者。我会从以下方面看待这次失败：1.敢于面对，相信自己2.善于反思，思考剖析3.走出阴影，加强学习4.再接再厉。</p><h2 id="谈谈你在校期间你认为成功或失败的事情："><a href="#谈谈你在校期间你认为成功或失败的事情：" class="headerlink" title="谈谈你在校期间你认为成功或失败的事情："></a>谈谈你在校期间你认为成功或失败的事情：</h2><p><em>回答样本一</em>：如：失败的事情：大学期间考了3次英语四级，每次都差那么一点，让我意识和体验到不用心的努力和不努力是一样的效果，并以此为戒，加倍努力。<br>成功的事情：（成功不分大小）如：</p><h2 id="对这项工作，你有哪些预见的困难"><a href="#对这项工作，你有哪些预见的困难" class="headerlink" title="对这项工作，你有哪些预见的困难"></a>对这项工作，你有哪些预见的困难</h2><p><em>回答样本一</em>：工作中出现一些困难是正常的，也是难免的，但是只要有坚忍不拔的毅力、良好的合作精神以及事前周密而充分的准备，任何困难都是可以克服的。</p><h2 id="我们为什么要录用你："><a href="#我们为什么要录用你：" class="headerlink" title="我们为什么要录用你："></a>我们为什么要录用你：</h2><p><em>回答样本一</em>：如“我符合贵公司的招聘条件，凭我目前掌握的技能、高度的责任感和良好的适应能力及学习能力，完全能胜任这份工作。我十分希望能为贵公司服务，如果贵公司给我这个机会，我一定能成为贵公司的栋梁！” </p><h2 id="在学校期间遇到过最大的挫折或者困难是什么，怎么解决的"><a href="#在学校期间遇到过最大的挫折或者困难是什么，怎么解决的" class="headerlink" title="在学校期间遇到过最大的挫折或者困难是什么，怎么解决的"></a>在学校期间遇到过最大的挫折或者困难是什么，怎么解决的</h2><p><em>回答样本一</em>：困难：如何让自己在自由，宽松的环境下不至于堕落，迷失自我，过起醉生梦死的日子。<br>解决：确定自己的人生目标，根据自身的情况，制定切实可行的计划，充分利用自己的大学时光，利用一切可利用的资源来帮自己实现自己的计划与承诺，把孤独当挑战，把苦难当敌人。<br><code>java</code></p><h2 id="介绍一下java的运行机制："><a href="#介绍一下java的运行机制：" class="headerlink" title="介绍一下java的运行机制："></a>介绍一下java的运行机制：</h2><p>程序源代码经过编译器编译转换为字节码文件，再经过虚拟机转换为机器码，最后交给计算机执行</p><h2 id="介绍jsp的运行机制："><a href="#介绍jsp的运行机制：" class="headerlink" title="介绍jsp的运行机制："></a>介绍jsp的运行机制：</h2><p>每一个jsp页面被访问时，jsp引擎先将它翻译成一个servlet源程序（.java），接着把servlet源程序编译成字节码文件(.class),然后执行这个文件，将执行结果发送到浏览器进行显示</p><h2 id="spring的核心："><a href="#spring的核心：" class="headerlink" title="spring的核心："></a>spring的核心：</h2><p><strong>AOP和IOC</strong><br>AOP：面向切面编程<br>IOC：控制反转  ：对象的实例不再由调用者创建，而是由Spring容器来创建<br>DI：依赖注入  ：将被依赖对象赋值给调用者的成员变量，这相当于为调用者注入了它依赖的实例。  1.构造器注入 2.setter注入</p><h2 id="事务的理解"><a href="#事务的理解" class="headerlink" title="事务的理解"></a>事务的理解</h2><p>1.原子性：在一个事务中，要么全部执行成功，要么全部失败回滚<br>2.一致性：事务执行前和后都处于一致性状态<br>3.持久性：事务操作是永久性的<br>4.隔离性：当一个事务正在对数据进行操作时，另一个事务不可以对数据进行操作</p><h2 id="接口和抽象类的区别："><a href="#接口和抽象类的区别：" class="headerlink" title="接口和抽象类的区别："></a>接口和抽象类的区别：</h2><p>1.接口中的方法全是抽象的，  抽象类可以同时包含抽象类和非抽象类方法。<br>2.类可以实现多个接口，但是只能继承一个抽象类<br>3.类如果要实现一个接口，它必须要实现接口声明的所有方法，但是，类可以不实现抽象类声明的所有方法，前提是 类也得声明成抽象的</p><h2 id="函数重载和函数重写："><a href="#函数重载和函数重写：" class="headerlink" title="函数重载和函数重写："></a>函数重载和函数重写：</h2><p>重载：一个类中含有多个名称相同的参数列表不同的方法<br>重写：子类重新定义了父类的方法，必须有相同的方法名，参数列表和返回类型。</p><h2 id="java语言支持的8中基本类型"><a href="#java语言支持的8中基本类型" class="headerlink" title="java语言支持的8中基本类型"></a>java语言支持的8中基本类型</h2><p>byte、short、int、long、float、double、boolean、char。</p><h2 id="面向对象的特性："><a href="#面向对象的特性：" class="headerlink" title="面向对象的特性："></a>面向对象的特性：</h2><p>封装、继承、多态<br>封装：给对象提供了隐藏内部特性的和行为的能力。<br>多态：是指允许不同类的对象对同一消息做出响应。</p><h2 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h2><p>1.静态变量前要加static关键字，实例变量前不加。<br>2.实例变量属于某个对象的属性，必须创建了实例对象</p><h2 id="多线程有几种实现方法？同步有几种实现方法？"><a href="#多线程有几种实现方法？同步有几种实现方法？" class="headerlink" title="多线程有几种实现方法？同步有几种实现方法？"></a>多线程有几种实现方法？同步有几种实现方法？</h2><p>多线程有两种实现方法，分别是继承Thread类和实现Runnable接口<br>同步的实现方面有两种，分别是synchronized，wait和notify</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象</p><h2 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h2><p>虽然进程在运行过程中可能会发生死锁，但产生死锁是必须具备一定条件的。产生死锁必须同时具备下面四个必要条件，只要其中任意一个条件不成立，死锁就不会产生：</p><p>　　　　　　（1）互斥条件。进程对所分配到的资源进行排他性使用，即在一段时间内，某资源只能被一个进程占用。如果此时还有其他进程请求该资源，则请求进程只能等待，直至占有该资源的进程用毕释放。</p><p>　　　　　　（2）请求和保持条件。进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源已被其他进程占有，此时请求进程被阻塞，但对自己以获得的资源保持不放。</p><p>　　　　　　（3）不可抢占条件。进程已获得的资源在未使用完之前不能被抢占，只能在进程使用完时由自己释放。</p><p>　　　　　　（4）循环等待条件。在发生死锁时，必然存在一个进程—资源的循环链，即进程集合{P0,P1,P2,P3,…,Pn}中的P0正在等待P1占用的资源，P1正在等待P2占用的资源，… … ，Pn正在等待已被P0占用的资源。</p><h2 id="处理死锁的方法"><a href="#处理死锁的方法" class="headerlink" title="处理死锁的方法"></a>处理死锁的方法</h2><p>（1）预防死锁。该方法是通过设置某些限制条件，去破坏产生死锁的四个必要条件中的一个或几个来预防产生死锁。</p><p>（2）避免死锁。在资源的动态分配过程中，用某种方法防止系统进入不安全状态，从而可以避免产生死锁。</p><p>（3）检测死锁。通过检测机构及时地检测出死锁的发生，然后采取适当的措施，把进程从思索中解脱出来。</p><p>（4）解除死锁。当检测到系统中已发生死锁时，就采取相应的措施，将进程从死锁状态中解脱出来。常用方法是—撤销一些进程，回收他们的资源，将他们分配给已处于阻塞状态的进程，使其能继续运行。</p><h2 id="GC是什么？为什么要有GC"><a href="#GC是什么？为什么要有GC" class="headerlink" title="GC是什么？为什么要有GC"></a>GC是什么？为什么要有GC</h2><p>GC垃圾回收，使用GC可以进行垃圾空间释放操作<br>内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，GC功能可以自动监测对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java面试中，频率最多的问题&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://sunoat77.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>关于数据库、事务_jsp笔记</title>
    <link href="http://sunoat77.github.io/2019/05/05/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81%E4%BA%8B%E7%89%A9%E6%B7%B1%E5%85%A5%E5%88%A8%E6%9E%90-jsp%E7%AC%94%E8%AE%B0/"/>
    <id>http://sunoat77.github.io/2019/05/05/关于数据库、事物深入刨析-jsp笔记/</id>
    <published>2019-05-05T08:12:08.000Z</published>
    <updated>2019-05-05T09:19:31.884Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDBC登陆案例并理解避免SQL注入</span><br></pre></td></tr></table></figure><hr><a id="more"></a><p><code>以下为创建数据库的课堂笔记（仅供参考）</code><br>创建普通用户：<br>sqlplus</p><p>system oracle</p><p>创建新用户：<br>create  user c##scott identified by tiger;</p><p>然后是解锁用户和各种授权<br>为刚创建的用户授权：<br>alter user c##用户名 account unlock;<br>授予新用户创建权限<br>grant create session to  c##用户名 ;<br>授予新用户数据库管理员权限：<br>grant dba to c##用户名;</p><p>授予用户其他权限：(需要再次进行测试)<br>GRANT CREATE USER,DROP USER,ALTER USER ,</p><pre><code>CREATE  ANY  VIEW , DROP ANY VIEW,EXP_FULL_DATABASE,IMP_FULL_DATABASE, DBA,CONNECT,RESOURCE,CREATE SESSION  TO  c##scott; </code></pre><hr><p>##一、连接数据库的步骤：首先在项目中加入ojdbc7.jar<br><strong> 1.加载驱动</strong><br>Class.forName(“oracle.jdbc.driver.OracleDriver”);<br><strong>2.建立连接</strong><br>Connection conn=DriverManager.getConnection(“jdbc:oracle:thin:@localhost:1521:orcl”,”system”,”oracle”);<br><strong>3.发生sql文(查询)</strong><br> Statement st=  conn.createStatement();<br>           String sql=””;<br>        ResultSet rs= st.executeQuery(sql);<br><strong> 4.处理结果集</strong><br> while(rs.next()){</p><pre><code>    System.out.print(rs.getInt(1)+re.getString(2));}</code></pre><p><strong>  5.释放资源</strong><br> finally{<br>        if(rs!=null){<br>            rs.close();<br>        }<br>        if(st!=null){<br>            st.close();<br>        }<br>        if(conn!=null){<br>            conn.close();<br>        }</p><pre><code>}      </code></pre><p>##二、理解SQL注入：Statement<br>String sql = “select * from user where username= ‘“+varname+”‘ and userpwd=’”+varpasswd+”‘“;<br>• stmt = conn.createStatement();<br>• rs = stmt.executeUpdate(sql);  </p><p>这是验证用户名密码的，对吧。但要是我们把’or ‘1’ = 1’当作密码传进去，<br>                                                              1234wwqq<br>• select * from user where username = ‘user’ and userpwd = ‘’ or ‘1’ = ‘1’;  </p><p>这是个永真式，因为1永远等于1。所以不管怎样都能获取到权限。哇。这就坏咯！这还不是最坏的，你再看！ </p><p>• String sql = “select * from user where username= ‘“+varname+”‘ and userpwd=’”+varpasswd+”‘“;<br>• stmt = conn.createStatement();<br>• rs = stmt.executeUpdate(sql);<br> 把’or ‘1’ = 1’;drop table book;当成密码传进去。这次直接把表给删了。</p><p>##三、PrepareStatement与statement的区别：<br>PrepareStatement优点：<br>(1)PreperedStatement可以避免SQL注入的问题。<br>(2)Statement会使数据库频繁编译SQL，可能造成数据库缓冲区溢出。<br>PreparedStatement 可对SQL进行预编译，从而提高数据库的执行效率。<br>(3)作为 Statement 的子类，<br>PreparedStatement 继承了 Statement 的所有功能。<br>另外它还添加了一整套方法，用于设置发送给数据库以取代 IN 参数占位符的值。<br>同时，三种方法 execute、 executeQuery 和 executeUpdate 已被更改以使之不再需要参数。<br>这些方法的 Statement 形式（接受 SQL 语句参数的形式）不应该用于 PreparedStatement 对象。 </p><p>##四、登录案例：<br>  JSP+JavaBean：实现了页面展现与业务逻辑处理的分离<br>  登录案例：<br>登录页面 login.jsp<br>校验界面validate.jsp——————》loginDao.java——————》连接数据库，<br>如果登录成功，跳转到成功界面，如果失败，跳转回登录界面</p><p>##五、事物<br>事务：事务的概念：/Jsp_Demo06/src/com/inspur/test/TransactionDemo.java<br>事务指逻辑上的一组操作，组成这组操作的各个单元，要不全部成功，要不全部不成功。<br>特点：<br>原子性（Atomicity）<br>原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。<br>一致性（Consistency）<br>事务前后数据的完整性必须保持一致<br>隔离性（Isolation）<br>事务的隔离性是指多个用户并发访问数据库时，一个用户的事务不能被其它用户的事务所干扰，多个并发事务之间数据要相互隔离。<br>持久性（Durability）<br>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。</p><p>##六、连接池<br>数据库连接池：<br>数据库连接池负责分配、管理和释放数据库连接，<br>它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；<br>释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。<br>这项技术能明显提高对数据库操作的性能。</p><p>连接池基本的思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，<br>当用户需要访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。<br>使用完毕后，用户也并非将连接关闭，而是将连接放回连接池中，以供下一个请求访问使用。<br>而连接的建立、断开都由连接池自身来管理。<br>同时，还可以通过设置连接池的参数来控制连接池中的初始连接数、<br>连接的上下限数以及每个连接的最大使用次数、最大空闲时间等等。<br>也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等<br>数据库连接池：<br>1、在tomcat的lib文件夹下面放置jar包ojdbc7.jar<br>2、在tomcat的server.xml配置文件中配置数据库连接池信息<br>JNDI技术：为开发人员提供查找或者访问java命名和目录的一种通用接口<br>3、修改ConnectionUtils.java文件<br>4、启动tomcat服务器<br>5、用户发出请求</p><p>在tomcat的server.xml配置文件中配置数据库连接池信息：<br>    <context path="/Demo_JSP06" docbase="E:\workspace1\Demo_JSP06\WebRoot" reloadable="true"><br>        &lt;Resource<br>            name=”oracle”    //JNDI的名称<br>            auth=”Container”  //容器<br>            type=”javax.sql.DataSource” //数据源<br>            driverClassName=”oracle.jdbc.driver.OracleDriver”//数据库驱动<br>            url=”jdbc:oracle:thin:@localhost:1521:oracle2”//连接数据库的地址<br>            username=”scott” //数据库的普通用户名<br>            password=”tiger”    //数据库的密码<br>            maxActive=”1000”   //处于最大数量的连接数据库对象的值:Connection<br>            maxIndle=”20”      //空闲状态下的连接数据库 对象(Connetcion)的值<br>            maxWait=”10000”    //等待的时间<br>        /&gt;<br>    </context></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JDBC登陆案例并理解避免SQL注入&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="http://sunoat77.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>JSP入门</title>
    <link href="http://sunoat77.github.io/2019/05/05/JSP%E5%85%A5%E9%97%A8/"/>
    <id>http://sunoat77.github.io/2019/05/05/JSP入门/</id>
    <published>2019-05-05T07:54:24.000Z</published>
    <updated>2019-05-05T08:04:12.682Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSP运行原理、脚本元素、指令、动作</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>1.JSP的执行过程</strong>：客户端发出Request（请求）;Tomcat服务器将JSP转译成Servlet的源代码（.java）;将产生的Servlet源代码经过编译后（.class）,并加到内存执行；把结果Response（响应）至客户端。<br><strong>2.JSP脚本元素</strong>：Scriptlet：&lt;% Java代码 %&gt;:声明的变量是局部变量，<br>    作用域是当前的整个Web应用程序，不可以被多线程共享的<br>    声明：&lt;%!  %&gt;：声明的变量是全局变量，可以被多个线程共享的<br>    表达式:&lt;%=  %&gt; :计算和显示数据<br><strong>3.JSP的指令</strong>：&lt;%@ page 属性1=”属性值1”  属性2=”属性值2” %&gt;<br>page<br>include：<br>    指令特点：<br>    这种称为静态包含（在编译之前已经做了处理）—-先将要包含的jsp代码嵌入到相应的jsp页面，然后再统一转换成一个servlet类。<br>    这种包含不能传参数<br>    包含页面和被包含页面访问的是同一个request内嵌对象。</p><p>taglib<br><strong>4.JSP的动作</strong>：&lt;jsp:动作名     /&gt;或 &lt;jsp:动作名  &gt;&lt;/jsp:动作名&gt;<br>include：<br>    动作特点：<br>    是动态包含，在运行期间进行嵌套，生成多个servlet类；<br>    包含和被包含的jsp访问的虽然不是同一个request内嵌对象，但是被包含的jsp文件可以访问包含jsp文件能够访问的参数；<br>    可以传参数；</p><p>param：</p><p>forward:</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;JSP运行原理、脚本元素、指令、动作&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>jsp-九大隐式对象</title>
    <link href="http://sunoat77.github.io/2019/05/02/jsp-%E4%B9%9D%E5%A4%A7%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1/"/>
    <id>http://sunoat77.github.io/2019/05/02/jsp-九大隐式对象/</id>
    <published>2019-05-02T02:24:08.000Z</published>
    <updated>2019-05-02T03:41:49.092Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsp隐式对象的解读:</span><br></pre></td></tr></table></figure><a id="more"></a><p>九大隐式对象：<br>输入输出对象：out、request、response<br>作用域通信对象：session、application、pageContext<br>servlet对象：page、config<br>错误对象：exception<br>JSP 定义的作用域包括 page、request、session 和 application</p><hr><h3 id="在说隐式对象之前先说一下请求重定向和请求转发的区别"><a href="#在说隐式对象之前先说一下请求重定向和请求转发的区别" class="headerlink" title="在说隐式对象之前先说一下请求重定向和请求转发的区别"></a>在说隐式对象之前先说一下请求重定向和请求转发的区别</h3><p>先说定义：一个web资源收到客户端请求后，通知服务器去调用另外一个web资源进行处理(服务器内部的调用)，称之为请求转发<br>    一个web资源收到客户端请求后，通知浏览器去访问另外一个web资源（浏览器进行2次请求），称之为请求重定向<br>    区别：<br>    1.forward是服务器内部转发，而redirect是通过客户端进行转发<br>    2.如果用forward进行转发的话，客户端的url地址不会改变，但是如果用redirect的话，则url地址会改变<br>    3.如果用forward进行转发，转发页面和被转发页面处于一个request请求内，而redirect不是。</p><h3 id="输入输出对象："><a href="#输入输出对象：" class="headerlink" title="输入输出对象："></a>输入输出对象：</h3><p><strong>（1）request</strong>：<br>1.接受数据：request.getParameter();获取的是form表单提交的数据(一个参数名对应一个参数值)<br>String[ ] getParameterValues (String name);(一个参数名对应多个参数值)<br>2.设置页面请求数据编码（只适用于编码）<br>    &lt;%<br>     request.setCharacterEncoding(“UTF-8”); //放在getParameter前才有效<br>    %&gt;<br>    比如：用户的注册啥的<br>    补充：get、post都适用的情况：<br>    &lt;%=new String(request.getParameter(“bookName”).getBytes(“ISO-8859-1”),”UTF-8”) %&gt;<br>3.设置属性、取得属性和删除属性<br>    setAttribute  getAttribute  removeAttribute<br>    程序员根据业务逻辑的需求，设置属性值<br>request.getParameter()和request.getAttribute()的不同点：<br>    request.getParameter()可以看做：form表单提交的数据是写入到服务器的，<br>    request.getParameter()是从服务器中取值。<br>    request.getAttribute()：写入到同一个request对象中的。<br><strong>4.请求转发</strong><br>request对象提供了一个getRequestDispatcher方法，该方法返回一个RequestDispatcher对象，调用这个对象的forward方法可以实现请求转发，从而共享请求中的数据<br>这里的URL可以为相对路径,如果URL开始为“/”,则认为它是相对于当前WEB应用程序的根目录。<br>    &lt;%<br>     RequestDispatcher requestDispatcher= request.getRequestDispatcher (“URL”);<br>     requestDispatcher.forward(request,response);<br>    %&gt;<br><strong>请求转发的特点</strong><br>在请求转发的过程中，地址栏不发生变化，两个页面之间使用的是同一个request对象！<br><strong>5.获得session</strong><br>    &lt;%<br>      HttpSession mySession = request.getSession();<br>    %&gt;<br>    <strong>注意：</strong><br>补充1：设置页面请求数据编码（只适用post） ：<br>    &lt;%<br>     request.setCharacterEncoding(“UTF-8”); //放在getParameter前才有效<br>    %&gt;<br><strong>（2）response对象</strong><br>常用方法<br>1.void sendRedirect (String name)<br>          发送一个响应给浏览器，指示其请求另一个URL<br>    //设置属性<br>    session.setAttribute(“userName”, userName);<br>    //请求重定向  /响应转发 :地址栏发生了变化，两个页面之间使用的不是同一个request对象<br>    response.sendRedirect(“success.jsp”);//使用的是相对路径的情况</p><p>2.void setHeader(String name,String value)<br>        设置响应头信息<br>    out.print(“2秒后，刷新到成功界面！”);<br>    response.setHeader(“refresh”, “2;url=success.jsp”);</p><p>3.void setContentType (String name)<br>        设置作为响应生成的内容的类型和字符编码<br><strong>(3)out 对象</strong></p><pre><code>作用域通信对象</code></pre><p><strong>(4)session会话技术：服务器端</strong><br>    cookie技术：客户端<br><strong>(5)application</strong>：统计用户浏览网页的次数<br><strong>(6)pageContext</strong>：可以访问任何的隐式对象</p><p>servlert对象：<br><strong>(7)page</strong>：使用 page 对象可以访问 Servlet 类的所有变量和方法</p><p><strong>(8)config</strong>：存储在编译 JSP 页面的过程中创建的 Servlet 的信息<br>提供了检索 Servlet 初始化参数的方法</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;jsp隐式对象的解读:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于数据库的链接-jdbc</title>
    <link href="http://sunoat77.github.io/2019/05/02/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E9%93%BE%E6%8E%A5-jdbc/"/>
    <id>http://sunoat77.github.io/2019/05/02/关于数据库的链接-jdbc/</id>
    <published>2019-05-02T01:18:22.000Z</published>
    <updated>2019-05-02T02:12:46.732Z</updated>
    
    <content type="html"><![CDATA[<p>在java中，数据库存取技术可分为如下几类：<br><a id="more"></a></p><ul><li>JDBC直接访问数据库</li><li>第三方O/R工具，如Mybatis等<br>JDBC是java访问数据库的基石。<h1 id="1、什么是JDBC"><a href="#1、什么是JDBC" class="headerlink" title="1、什么是JDBC"></a>1、什么是JDBC</h1>JDBC是一个独立于特定数据库管理系统/通用的Sql数据库存取和操作的公共接口，定义了用来访问数据库的标准java类库，使用这个类可以以一种标准的方法、方便的访问数据库资源。<br>接下来，我们以mysql为例：<br>通过java连接mysql数据库的步骤<br>1.将mysql的驱动包导入到项目中<br><img src="https://s2.ax1x.com/2019/05/02/EYONut.png" alt="关流"><br>2.创建一个Class文件，名为DBUtils<br>首先加载数据库驱动Class.forName(“com.mysql.jdbc.Driver”);<br>3.获取连接DriverManager.getConnection(url,user,password);<br>url:com.mysql:localhost:3306/mysqls?characterEncoding=utf=8<br>user:你的数据库名<br>password：你的数据库密码<br>4.创建处理对象：获取连接对象.createStatement();<br><img src="https://s2.ax1x.com/2019/05/02/EYXirt.png" alt="连接数据库"><br>5.编写sql语句<br>6.执行sql语句：<br>statement.executeQuery(sql);//查询<br>statementexecuteUpdate(sql);//增，删，改<br>7.关闭流<br>获取连接对象.close<br><img src="https://s2.ax1x.com/2019/05/02/EYXPKI.png" alt="关流"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在java中，数据库存取技术可分为如下几类：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>测试版</title>
    <link href="http://sunoat77.github.io/2019/04/28/%E6%B5%8B%E8%AF%95%E7%89%88/"/>
    <id>http://sunoat77.github.io/2019/04/28/测试版/</id>
    <published>2019-04-28T13:51:17.000Z</published>
    <updated>2019-05-02T02:04:51.124Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.<br><a id="more"></a></p><h1 id="来自一个程序员的博客"><a href="#来自一个程序员的博客" class="headerlink" title="来自一个程序员的博客"></a>来自一个程序员的博客</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p><a href="http://baidu.com" target="_blank" rel="noopener">百度一下</a></p><ul><li>列表内容</li><li>列表内容1</li><li>列表内容2</li><li>列表内容3  </li></ul><table><thead><tr><th>姓名</th><th>技能</th><th>排行</th></tr></thead><tbody><tr><td>刘备</td><td>哭</td><td>大哥</td></tr><tr><td>关于</td><td>打</td><td>二哥</td></tr><tr><td>张飞</td><td>骂</td><td>三哥  </td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void static main(String[] args)&#123;</span><br><span class="line">system.out.println(&quot;这是我的第一个博客&quot;);</span><br><span class="line">&#125;</span><br><span class="line">alert(&apos;hello world&apos;);</span><br></pre></td></tr></table></figure><hr><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><pre><code>&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;table border=&quot;1&quot; ellspacing=&quot;0&quot; cellpadding=&quot;5&quot;&gt;    &lt;caption&gt;成绩单&lt;/caption&gt;    &lt;tr&gt;        &lt;td&gt;姓名&lt;/td&gt;        &lt;td&gt;性别&lt;/td&gt;        &lt;td&gt;成绩&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;张三&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;89&lt;/td&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李四&lt;/td&gt;        &lt;td&gt;男&lt;/td&gt;        &lt;td&gt;88&lt;/td&gt;    &lt;/tr&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://s2.ax1x.com/2019/04/29/E3rTfI.jpg" alt="hello world"></p><p>##第三章<br><img src="https://s2.ax1x.com/2019/04/29/E3rTfI.jpg" alt="天气"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://sunoat77.github.io/2019/04/28/hello-world/"/>
    <id>http://sunoat77.github.io/2019/04/28/hello-world/</id>
    <published>2019-04-28T06:47:56.563Z</published>
    <updated>2019-04-28T07:07:40.689Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
